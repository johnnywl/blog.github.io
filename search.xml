<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Docker安装Seafile、Onlyoffice]]></title>
    <url>%2F2019%2F09%2F24%2FDocker%E5%AE%89%E8%A3%85Seafile%E3%80%81Onlyoffice%2F</url>
    <content type="text"><![CDATA[docker安装Seafile、Onlyoffice环境：CentOS 7.6 Docker18.06.3-ce已安装 安装docker-compose 12curl -L https://github.com/docker/compose/releases/download/1.23.0-rc3/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose 创建需要的目录 123mkdir -p /seafile/datamkdir -p /seafile/dbmkdir -p /seafile/db/db-backup 安装Seafile 6.3.4 创建docker-compose.yml文件 1234567891011121314151617181920212223242526272829303132333435363738 cd /seafile vi docker-compose.yml---输入以下内容--- version: &apos;2.0&apos; services: memcached: image: memcached:1.5.6 container_name: seafile-memcached restart: always entrypoint: memcached -m 256 networks: - seafile-net seafile: image: seafileltd/seafile:latest container_name: seafile restart: always ports: - &quot;80:80&quot; # - &quot;443:443&quot; # If https is enabled, cancel the comment. volumes: - /seafile/data:/shared # Requested, specifies the path to Seafile data persistent store. environment: - DB_HOST=db - DB_ROOT_PASSWD=boqii399 # Requested, the value shuold be root&apos;s password of MySQL service. # - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone. - SEAFILE_ADMIN_EMAIL=johnny@boqii.com # Specifies Seafile admin user, default is &apos;me@example.com&apos;. - SEAFILE_ADMIN_PASSWORD=boqii399 # Specifies Seafile admin password, default is &apos;asecret&apos;. - SEAFILE_SERVER_LETSENCRYPT=false # Whether to use https or not. - SEAFILE_SERVER_HOSTNAME=172.16.54.254 # Specifies your host name if https is enabled. depends_on: - memcached networks: - seafile-net networks: seafile-net:------------------ 安装Seafile 1docker-compose -f docker-compose.yml up -d 安装Seafile7系列版本 创建docker-compose.yml文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 cd /seafile vi docker-compose.yml--- 输入以下内容--- version: &apos;2.0&apos; services: db: image: mariadb:10.1 container_name: seafile-mysql restart: always environment: - MYSQL_ROOT_PASSWORD=boqii399 # Requested, set the root&apos;s password of MySQL service. - MYSQL_LOG_CONSOLE=true volumes: - /seafile/db:/var/lib/mysql # Requested, specifies the path to MySQL data persistent store. networks: - seafile-net memcached: image: memcached:1.5.6 container_name: seafile-memcached restart: always entrypoint: memcached -m 256 networks: - seafile-net seafile: image: seafileltd/seafile-mc:latest container_name: seafile restart: always ports: - &quot;80:80&quot; # - &quot;443:443&quot; # If https is enabled, cancel the comment. volumes: - /seafile/data:/shared # Requested, specifies the path to Seafile data persistent store. environment: - DB_HOST=db - DB_ROOT_PASSWD=boqii399 # Requested, the value shuold be root&apos;s password of MySQL service. # - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone. - SEAFILE_ADMIN_EMAIL=johnny@boqii.com # Specifies Seafile admin user, default is &apos;me@example.com&apos;. - SEAFILE_ADMIN_PASSWORD=boqii399 # Specifies Seafile admin password, default is &apos;asecret&apos;. - SEAFILE_SERVER_LETSENCRYPT=false # Whether to use https or not. - SEAFILE_SERVER_HOSTNAME=172.16.54.254 # Specifies your host name if https is enabled. depends_on: - db - memcached networks: - seafile-net networks: seafile-net:-------------------------- 安装Seafile 12 docker-compose -f docker-compose.yml up -d` 安装onlyoffice 创建需要的目录 1mkdir /data/onlyoffice 创建docker-compose.yaml文件 1234567891011121314151617181920212223242526272829303132333435 cd /data/onlyoffice vi docker-compose.yml--- 输入以下内容--- version: &apos;2.0&apos; services: onlyoffice-documentserver: container_name: onlyoffice restart: always image: onlyoffice/documentserver:latest # environment: # - AMQP_SERVER_URL=amqp://guest:guest@onlyoffice-activemq # - AMQP_SERVER_TYPE=activemq # stdin_open: true ports: - &apos;8001:80&apos; # - &apos;443:443&apos; # networks: # - onlyoffice # onlyoffice-activemq: # container_name: onlyoffice-activemq # image: webcenter/activemq:5.14.3 # environment: # - ACTIVEMQ_USERS_guest=guest # - ACTIVEMQ_GROUPS_owners=guest # restart: always # networks: # - onlyoffice # expose: # - &apos;5672&apos; networks: onlyoffice: # driver: &apos;bridge&apos;-------------------------- 安装onlyofficedocker-compose -f docker-compose.yml up -d 启动容器docker start &lt;容器名&gt; 开机自启动容器docker update --restart=always &lt;容器名&gt;seafile系统配置 备份seafile数据Seafile 6.3.4 数据库备份1234cd /seafile/db/db-backup docker exec -ti seafile mysqldump -uroot --opt ccnet_db &gt; ccnet_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile mysqldump -uroot --opt seafile_db &gt; seafile_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile mysqldump -uroot --opt seahub_db &gt; seahub_db.sql.$(date +&quot;%F&quot;) — 脚本— #!/bin/bash cd /seafile/db/db-backup for i in ccnet_db seafile_db seahub_db do docker exec -ti seafile mysqldump -uroot –opt $i &gt; $i.sql.$(date +”%F”) done # 清理30天前 find . -name “sql“ -mtime +30 -delete 1234- 数据备份 `rsync -avh --progress /seafile 目标目录(备份目录)`- 数据恢复 - 数据库恢复 cd /seafile/db/db-backup docker exec -ti seafile bash mysql ccnet_db &lt; ccnet_db.sql.日期 mysql seafile_db &lt; seafile_db.sql.日期 mysql seahub_db &lt; seahub_db.sql.日期123456789101112131415161718192021222324- 数据文件恢复 `rsync -avh --progress 备份目录 /seafile`### Seafile 7版本系列- 数据库备份``` cd /seafile/db/db-backup docker exec -ti seafile-mysql mysqldump -uroot -pboqii399 --opt ccnet_db &gt; ccnet_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile-mysql mysqldump -uroot -pboqii399 --opt seafile_db &gt; seafile_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile-mysql mysqldump -uroot -pboqii399 --opt seahub_db &gt; seahub_db.sql.$(date +&quot;%F&quot;)--- 脚本--- #!/bin/bash cd /seafile/db/db-backup for i in ccnet_db seafile_db seahub_db do docker exec -ti seafile-mysql mysqldump -uroot --opt $i &gt; $i.sql.$(date +&quot;%F&quot;) done # 清理30天前 find . -name &quot;*sql*&quot; -mtime +30 -delete------------ 数据备份rsync -avh --progress /seafile 目标目录(备份目录) 数据恢复 数据库恢复 #方法1： `docker exec -ti seafile-mysql /bin/sh -c &quot; mysql -uroot -pboqii399 ccnet_db &lt; /var/lib/mysql/db-back/ccnet_db.sql.2019-07-25&quot;` #方法2：123docker exec -ti seafile-mysql bashmysql -uroot -pboqii399 seafile_db &lt; /var/lib/mysql/db-back/seafile_db.sql.2019-07-25mysql -uroot -pboqii399 seahub_db &lt; /var/lib/mysql/db-back/seahub_db.sql.2019-07-25 数据文件恢复rsync -avh --progress 备份目录 /seafile]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建hexo博客系统]]></title>
    <url>%2F2019%2F09%2F23%2F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[环境：已注册Github,并将本机的SSH Key成功上传 安装1、 rpm安装nodejs npm 12curl -sL https://rpm.nodesource.com/setup_10.x | bash -yum install -y nodejs 2、 安装hexo 1npm install -g hexo 初始化1、初始化 12cd /datahexo init blog 2、框架安装npm install3、安装Hexo启动服务器的插件npm install hexo-server --save4、启动服务器 本地查看效果，若不指定端口，默认为4000hexo server 配置1、Github创建仓库 12创建的仓库名称必须是***.github.io在仓库的settings中，勾选Template repository 2、安装hexo的git组件 1npm install hexo-deployer-git --save 3、添加git配置 12345678cd /data/blog/vi _config.yml------添加如下内容------deploy: type: git repository: git@github.com:*/*.github.io.git #如git@github.com:johnnywl/johnnywl.github.io.git branch: master------------------------ 4、查看是否可提交代码至github仓库 1ssh -T -ai ~/.ssh/id_rsa git@github.com 创建博客12hexo new &apos;博客名称&apos;vi /data/blog/source/_posts/&apos;博客名称.md&apos; 部署hexo12345hexo ghexo d----或者----hexo d -g------------ hexo优化 下载主题 1234cd /data/toolswget https://github.com/theme-next/hexo-theme-next/archive/master.zipunzip master.zipmv hexo-theme-next-master /data/blog/themes/hexo-theme-next 修改_config.yml 中的主题属性 12title: Johnnywl&apos;s Blogtheme: hexo-theme-next hexo-theme-next首页文字显示预览 123456cd /data/blog/themes/hexo-theme-nextvi _config.yml---修改如下内容---auto_excerpt: enable: false # false修改为true ------------------ hexo-theme-next添加搜索功能 1234567891011121314npm install hexo-generator-searchdb --savevi /data/blog/_config.yml---添加如下内容---search: path: search.xml field: post format: html limit: 10000------------------vi /data/blog/themes/hexo-theme-next/_config.yml---修改如下内容---local_search: enable: false # false修改为true------------------ Mist字体的段落间距过大 12345678910vi /data/blog/themes/hexo-theme-next-master/source/css/_schemes/Mist/_posts-expand.styl---修改如下内容--- article &#123; margin-top: 120px; #修改此项，可改变段落间距 &amp;:first-child &#123; margin-top: 0; &#125; &#125;------------------ 添加网格 123456789101112131415vi /data/blog/themes/hexo-theme-next-master/layout/_layout.swig---添加如下内容 --- # 以下代码添加在&lt;/body&gt;前（不能放在&lt;/head&gt;的后面）&#123;% if thmem.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% ednif %&#125;-----------------vi /data/blog/themes/hexo-theme-next/_config.yml---修改如下内容---canvas_nest：truecolor:线条颜色，默认：&apos;0,0,0&apos;,三个数字分别为（R,G,B）opacity:线条透明度（0~1），默认：0.5count:线条的总数量，默认：150zIndex:背景的z-index属性，css属性用于控制所在层的位置，默认：-1------------------]]></content>
  </entry>
</search>
