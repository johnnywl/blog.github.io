<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Win7封装]]></title>
    <url>%2F2019%2F09%2F26%2FWin7%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[虚拟机安装步骤就不多说了，下一步到结束 取消这2个方框的勾 新建和配置适合封装WIN7-64位的虚拟机点创建新的虚拟机 自定义 选稍后安装操作系统 选Windows7 64位，如果是封装32位的就选Windows7]]></content>
  </entry>
  <entry>
    <title><![CDATA[U盘安装CentOS7.X]]></title>
    <url>%2F2019%2F09%2F26%2FU%E7%9B%98%E5%AE%89%E8%A3%85CentOS7-X%2F</url>
    <content type="text"><![CDATA[U盘安装CentOS7.X 下载 Centos7.X镜像 下载Ultraiso(最新版) 使用Ulrtaiso制作CentOS安装盘 U盘的写入方式选择:USB-HDD+需要牢记U盘的LABEL信息(默认CENTOS 7 x8) 安装 U盘插入电脑上，选择U盘启动 BIOS启动 UEFI启动 在弹出的安装CentOS界面 BIOS启动的，直接回车进行安装 UEFI启动的，按”e”继续编辑，将”LABEL=Centos\x207\x20x\86_64 quiet“，修改为”LABEL=Centos\x207\x20x\8 quiet”。以保证和U盘的LABEL保持一致。 按Ctrl+X继续安装 在对硬盘进行分区时，Device Type 选择”Standard Partition”,且须建立”/boot/efi”分区，大小”50MB”]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL各种安装方式]]></title>
    <url>%2F2019%2F09%2F24%2FMySQL%E5%90%84%E7%A7%8D%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[mysql安装的各种方式一.Yum安装mysql各种版本首先，yum安装mysql各种版本，就算用了163的yum源，一样也是不能随心所欲的找到想要的版本的，所以，需要配置单独的yum源或下载包含yum源的安装包，两种方式任选其一。第一种：查看系统里面有没有mysql 的repoyum repolist all | grep mysql 如果没有则配置一个（本文以mysql5.6为例） vim /etc/yum.repos.d/mysql-community.repo [mysql56-community] name=MySQL 5.6 Community Server baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/6/$basearch/ ##这里可以根据需求修改baseurl，如.../7/$basearch/ enabled=1 gpgcheck=1 gpgkey=编辑gpgkey：(官网gpgkey地址为： http://dev.mysql.com/doc/refman/5.6/en/checking-gpg-signature.html ) vim /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1.4.9 (SunOS) mQGiBD4+owwRBAC14GIfUfCyEDSIePvEW3SAFUdJBtoQHH/nJKZyQT7h9bPlUWC3 RODjQReyCITRrdwyrKUGku2FmeVGwn2u2WmDMNABLnpprWPkBdCk96+OmSLN9brZ fw2vOUgCmYv2hW0hyDHuvYlQA/BThQoADgj8AW6/0Lo7V1W9/8VuHP0gQwCgvzV3 BqOxRznNCRCRxAuAuVztHRcEAJooQK1+iSiunZMYD1WufeXfshc57S/+yeJkegNW hxwR9pRWVArNYJdDRT+rf2RUe3vpquKNQU/hnEIUHJRQqYHo8gTxvxXNQc7fJYLV K2HtkrPbP72vwsEKMYhhr0eKCbtLGfls9krjJ6sBgACyP/Vb7hiPwxh6rDZ7ITnE kYpXBACmWpP8NJTkamEnPCia2ZoOHODANwpUkP43I7jsDmgtobZX9qnrAXw+uNDI QJEXM6FSbi0LLtZciNlYsafwAPEOMDKpMqAK6IyisNtPvaLd8lH0bPAnWqcyefep rv0sxxqUEMcM3o7wwgfN83POkDasDbs3pjwPhxvhz6//62zQJ7Q2TXlTUUwgUmVs ZWFzZSBFbmdpbmVlcmluZyA8bXlzcWwtYnVpbGRAb3NzLm9yYWNsZS5jb20+iGkE ExECACkCGyMGCwkIBwMCBBUCCAMEFgIDAQIeAQIXgAIZAQUCUwHUZgUJGmbLywAK CRCMcY07UHLh9V+DAKCjS1gGwgVI/eut+5L+l2v3ybl+ZgCcD7ZoA341HtoroV3U 6xRD09fUgeq0O015U1FMIFBhY2thZ2Ugc2lnbmluZyBrZXkgKHd3dy5teXNxbC5j b20pIDxidWlsZEBteXNxbC5jb20+iG8EMBECAC8FAk53Pa0oHSBidWlsZEBteXNx bC5jb20gd2lsbCBzdG9wIHdvcmtpbmcgc29vbgAKCRCMcY07UHLh9bU9AJ9xDK0o xJFL9vTl9OSZC4lX0K9AzwCcCrS9cnJyz79eaRjL0s2r/CcljdyIZQQTEQIAHQUC R6yUtAUJDTBYqAULBwoDBAMVAwIDFgIBAheAABIJEIxxjTtQcuH1B2VHUEcAAQGu kgCffz4GUEjzXkOi71VcwgCxASTgbe0An34LPr1j9fCbrXWXO14msIADfb5piEwE ExECAAwFAj4+o9EFgwlmALsACgkQSVDhKrJykfIk4QCfWbEeKN+3TRspe+5xKj+k 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 AcOphrnJ =443I -----END PGP PUBLIC KEY BLOCK----- rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql ##导入GPGkey yum install mysql-community-server第二种：这是yum最简单的方式 wget http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm rpm -ivh mysql-community-release-el6-5.noarch.rpm yum install mysql-community-server以上是yum安装方法 编译安装mysql 首先做准备工作：安装依赖，安装必备软件包，创建basedir,datadir ,创建用户，创建组，下载mysql。此类工作不分先后。下载mysql源码包: wget http://www.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.12.tar.gz/from/http://cdn.mysql.com/版本可以按自己需求更改。必备的软件包有：必备的包和工具 gcc/g++ ：MySQL 5.6开始，需要使用g++进行编译。 cmake ：MySQL 5.5开始，使用cmake进行工程管理，cmake需要2.8以上版本。 bison ：MySQL语法解析器需要使用bison进行编译。 ncurses-devel ：用于终端操作的开发包。 zlib ：MySQL使用zlib进行压缩 功能需要的包 libxml ：用于XML输入输出方式的支持。 openssl ：使用openssl安全套接字方式通信。 dtrace ：用于诊断MySQL问题。 yum install gcc g++ bison-devel ncurses-devel zlib openssl openssl-devel cmake make下面说说mysql编译安装的常见选项 ###指定安装文件的安装路径时常用的选项： -DCMAKE_INSTALL_PREFIX=/usr/local/mysql ##指定Mysql编译安装到的路径 -DMYSQL_DATADIR=/data/mysql ##指定Mysql数据存放路径 -DSYSCONFDIR=/etc ##指定MySQL的配置文件路径 ###默认编译的存储引擎包括：csv、myisam、myisammrg和heap。若要安装其它存储引擎，可以使用类似如下编译选项： -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 ###若要明确指定不编译某存储引擎，可以使用类似如下的选项： -DWITHOUT_&lt;ENGINE&gt;_STORAGE_ENGINE=1 ###比如： -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 -DWITHOUT_PARTITION_STORAGE_ENGINE=1 ###如若要编译进其它功能，如SSL等，则可使用类似如下选项来实现编译时使用某库或不使用某库： -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 ###其它常用的选项： -DMYSQL_TCP_PORT=3306 -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DENABLED_LOCAL_INFILE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_DEBUG=0 -DENABLE_PROFILING=1创建mysql的安装目录，数据目录，用户，用户组以及修改权限 mkdir -p /data/mysql mkdir -p /usr/local/mysql useradd mysql groupadd mysql chown -R mysql:mysql /data/mysql chown -R mysql:mysql /usr/local/mysql编译安装 tar -zxvf mysql-5.6.12.tar.gz cd ~/mysql-5.6.28 cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DINSTALL_DATADIR=/data/mysql/ -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DEXTRA_CHARSETS=all -DWITH_SSL=yes -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_READLINE=on make &amp;&amp; make install编译安装较yum安装mysql，要复杂一些，过程中必然会出现这样那样的问题下面是一些问题的汇总：在cmake时，可能会报错 CMake Error at cmake/ssl.cmake:164 (FILE): file STRINGS file &quot;/root/src/mysql-5.6.12/OPENSSL_INCLUDE_DIR-NOTFOUND/openssl/opensslv.h&quot; cannot be read.一般这种情况，就是依赖包没有安装，这里就是openssl-devel没有安装，yum一个就好 注意：在重新cmake的时候，一定记得删除CMakecach.txt文件，这是cmake时产生的缓存文件，否则重新cmake不会生效 在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会搜索”$basedir/my.cnf”，在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置！ 注意：在CentOS 6.4版操作系统的最小安装完成后，在/etc目录下会存在一个my.cnf，需要将此文件更名为其他的名字，如：/etc/my.cnf.bak，否则，该文件会干扰源码安装的MySQL的正确配置，造成无法启动。 在使用”yum update”更新系统后，需要检查下/etc目录下是否会多出一个my.cnf，如果多出，将它重命名成别的。否则，MySQL将使用这个配置文件启动，可能造成无法正常启动等问题。 MySQL启动成功后，root默认没有密码，我们需要设置root密码。 设置之前，我们需要先设置PATH，要不不能直接调用mysql 修改/etc/profile文件，在文件末尾添加 PATH=/usr/local/mysql/bin:$PATH export PATH关闭文件，让配置立即生效source /etc/profile。编译安装优点在于可以一次性开启mysql各种需要的模块，以满足一些特殊需求，虽然安装上较为繁琐，但是相对yum安装后再去开启某些模块要节省不少功夫。]]></content>
  </entry>
  <entry>
    <title><![CDATA[CentOS配置YUM源]]></title>
    <url>%2F2019%2F09%2F24%2FCentOS%E9%85%8D%E7%BD%AEYUM%E6%BA%90%2F</url>
    <content type="text"><![CDATA[CentOS配置外部YUM源以配置阿里云的为例 备份 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载新的CentOS-Base.repo 到/etc/yum.repos.d/ #Centos6 yum源 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo 下载新的CentOS-Base.repo 到/etc/yum.repos.d/ #Centos7 yum源 123wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo #阿里云源wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo #163源 清除系统所有的yum缓存 yum clean all 生成yum缓存 yum makecach CentOS配置外部epel源 安装epel源 1234yum list | grep epel-releaseyum install -y epel-releasecd /etc/yum.repos.d/ls # epel源安装成功，比原来多了一个epel.repo和epel-testing.repo文件 使用阿里开源镜像提供的epel源 wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo 清除系统yum缓存，并重新生成新的yum缓存12yum clean allyum makecache 查看系统可用的yum源和所有的yum源 yum repolist enabled]]></content>
  </entry>
  <entry>
    <title><![CDATA[seafile部署onlyoffice]]></title>
    <url>%2F2019%2F09%2F24%2Fseafile%E9%83%A8%E7%BD%B2onlyoffice%2F</url>
    <content type="text"><![CDATA[为seafile部署onlyoffice 准备工作 成功安装seafie 成功安装onlyoffice 配置seafile 1234567编辑 seahub_settings.py 加入下方配置# Enable Only OfficeENABLE_ONLYOFFICE = TrueVERIFY_ONLYOFFICE_CERTIFICATE = FalseONLYOFFICE_APIJS_URL = &apos;http://172.16.76.13:8001/web-apps/apps/api/documents/api.js&apos;ONLYOFFICE_FILE_EXTENSION = (&apos;doc&apos;, &apos;docx&apos;, &apos;ppt&apos;, &apos;pptx&apos;, &apos;xls&apos;, &apos;xlsx&apos;)ONLYOFFICE_EDIT_FILE_EXTENSION = (&apos;doc&apos;, &apos;docx&apos;, &apos;ppt&apos;, &apos;pptx&apos;, &apos;xls&apos;, &apos;xlsx&apos;) 注1：其中 VERIFY_ONLYOFFICE_CERTIFICATE 选项如果 onlyoffice 使用了 https 的话可以选择更改为 True 提高安全性，如果是使用 http 协议则改为 False 注2：如果没使用 memcached 的话，还需要执行 rm /tmp/seahub_cached/ 清空缓存 重启seahub 123rm -f /opt/seafile/conf/seahub_settings.pyccd /opt/seafile/seafile-server-latest./seahub.sh restart]]></content>
  </entry>
  <entry>
    <title><![CDATA[CentOS之SSH]]></title>
    <url>%2F2019%2F09%2F24%2FCentOS%E4%B9%8BSSH%2F</url>
    <content type="text"><![CDATA[CentOS解决SSH登录速度慢 备份配置文件 cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak 修改配置文件 1234vi /etc/ssh/sshd_config# 修改以下2个参数输入/,查找GSSAPIAuthentication 赋值为no输入/,查找UseDNS,赋值为 no(该项默认不启用的，要把前面的#删除掉) 重启ssh服务 1234# CentOS7 重启服务命令systemctl restart sshd# CentOS6 重启服务命令service sshd restart SSH 密钥创建及密钥登录 创建密钥对 12cd /用户目录/.ssh ssh-keygen -t rsa 执行密钥生成命令，基本上是一路回车既可以了，但是需要注意的是：执行命令的过程中是会提示输入密钥的密码的，不需要密码直接回车就行。密钥生成后会在当前目录下多出两个文件，id_rsa和id_rsa.pub，其中id_rsa是私钥，id_rsa.pub这个是公钥。 公钥添加到需要登录的远程服务器的authorized_keys文件 方法一： 1ssh-copy-id -i /root/.ssh/id_rsa.pub root@远程服务器IP地址或域名 方法二： 复制id_rsa.pub文件的内容 1vi /root/.ssh/id_rsa.pub 进入远程服务器需要SSH登录的用户的目录下，查看目录下是否有authorized_keys文件没有的话创建下,授予600权限，将复制的id_rsa.pub文件内容进行粘贴到authorized_keys文件中 1234cd /root/.sshlsvi authorized_keyschmod 600 /root/.ssh/authorized_keys # 此文件的权限必须是600 重启ssh服务 1234# CentOS7 重启服务命令systemctl restart sshd# CentOS6 重启服务命令service sshd restart ~/.ssh目录找不到解决方法执行ssh localhost即可解决 原因： .ssh 是记录密码信息的文件夹，如果没有登录过root的话，就没有 .ssh 文件夹，因此登录 localhost ，并输入密码就会生成了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Docker安装]]></title>
    <url>%2F2019%2F09%2F24%2FDocker%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[下载1234567# 下载18.03 docker版本并安装(本地安装)wget https://download.docker.com/linux/centos/7/x86_64/edge/Packages/docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpmyum localinstall docker-ce-18.03.0.ce-1.el7.centos.x86_64.rpm # 下载18.06.03 docker版本并安装(本地安装)wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-18.06.3.ce-3.el7.x86_64.rpmyum localinstall docker-ce-18.06.3.ce-3.el7.x86_64.rpm # service docker restart 123456789# 安装18.06.3 docker版本并安装(非本地安装)第一步、安装必要的一些系统工具yum install -y yum-utils device-mapper-persistent-data lvm2 bash-completion第二步、添加软件源 (阿里云软件源)yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo第三步、查看yum源中所有的docker版本yum list docker-ce --showduplicates | sort -r第四步、安装 Docker-CEyum -y install --setopt=obsoletes=0 docker-ce-18.06.3.ce-3.el7 docker-ce-selinux-18.06.3.ce-3.el7 安装17.03.2版本1234567891011121314151617181920212223242526 yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine \ container*# 定义安装版本export docker_version=17.03.2# step 1: 安装必要的一些系统工具 yum install -y yum-utils device-mapper-persistent-data lvm2 bash-completion# Step 2: 添加软件源信息 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# Step 3: 更新并安装 Docker-CE yum makecache allversion=$(yum list docker-ce.x86_64 --showduplicates | sort -r|grep $&#123;docker_version&#125;|awk &apos;&#123;print $2&#125;&apos;) yum -y install --setopt=obsoletes=0 docker-ce-$&#123;version&#125; docker-ce-selinux-$&#123;version&#125;# 如果已经安装高版本Docker,可进行降级安装(可选)yum downgrade --setopt=obsoletes=0 -y docker-ce-$&#123;version&#125; docker-ce-selinux-$&#123;version&#125;# 设置开机启动 systemctl enable docker]]></content>
  </entry>
  <entry>
    <title><![CDATA[openssl 签发证书]]></title>
    <url>%2F2019%2F09%2F24%2Fopenssl-%E7%AD%BE%E5%8F%91%E8%AF%81%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[Openssl 创建证书创建根证书CA 生成根证书的私钥 1234openssl genrsa -out ca.key 2048#genrsa --产生rsa密钥命令#-out ---输出路径#2048 --密钥的长度位数 生成自签证书，即根证书CA 12345openssl req -new -x509 -days 3650 -key ca.key -out ca.crt#new：表示生成一个新证书签署请求#x509：专用于CA生成自签证书，如果不是自签证书则不需要此项#key：用到的私钥文件#days：证书的有效期限，单位是day（天） 颁发证书 生成私钥 1openssl genrsa -out yourname.key 2048 生成证书签署请求 123openssl req -new -days 3650 -key yourname.key -out yourname.csr##subject=/C=CN/ST=SH/L=SH/O=Boqii/OU=IT/CN=yourname/emailAddress=***@***.com# 在根证书上，颁发证书 1openssl x509 -req -in yourname.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out yourname.crt 格式转换 格式转换为pfx格式的私钥 1openssl pkcs12 -export -out yourname.pfx -inkey yourname.key -in yourname.crt 格式转换为cer格式的公钥 1openssl x509 -inform pem -in yourname.crt -outform der -out yourname.cer]]></content>
  </entry>
  <entry>
    <title><![CDATA[Docker安装Seafile、Onlyoffice]]></title>
    <url>%2F2019%2F09%2F24%2FDocker%E5%AE%89%E8%A3%85Seafile%E3%80%81Onlyoffice%2F</url>
    <content type="text"><![CDATA[docker安装Seafile、Onlyoffice环境：CentOS 7.6 Docker18.06.3-ce已安装 安装docker-compose 12curl -L https://github.com/docker/compose/releases/download/1.23.0-rc3/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose 创建需要的目录 123mkdir -p /seafile/datamkdir -p /seafile/dbmkdir -p /seafile/db/db-backup 安装Seafile 6.3.4 创建docker-compose.yml文件 1234567891011121314151617181920212223242526272829303132333435363738 cd /seafile vi docker-compose.yml---输入以下内容--- version: &apos;2.0&apos; services: memcached: image: memcached:1.5.6 container_name: seafile-memcached restart: always entrypoint: memcached -m 256 networks: - seafile-net seafile: image: seafileltd/seafile:latest container_name: seafile restart: always ports: - &quot;80:80&quot; # - &quot;443:443&quot; # If https is enabled, cancel the comment. volumes: - /seafile/data:/shared # Requested, specifies the path to Seafile data persistent store. environment: - DB_HOST=db - DB_ROOT_PASSWD=boqii399 # Requested, the value shuold be root&apos;s password of MySQL service. # - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone. - SEAFILE_ADMIN_EMAIL=johnny@boqii.com # Specifies Seafile admin user, default is &apos;me@example.com&apos;. - SEAFILE_ADMIN_PASSWORD=boqii399 # Specifies Seafile admin password, default is &apos;asecret&apos;. - SEAFILE_SERVER_LETSENCRYPT=false # Whether to use https or not. - SEAFILE_SERVER_HOSTNAME=172.16.54.254 # Specifies your host name if https is enabled. depends_on: - memcached networks: - seafile-net networks: seafile-net:------------------ 安装Seafile 1docker-compose -f docker-compose.yml up -d 安装Seafile7系列版本 创建docker-compose.yml文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 cd /seafile vi docker-compose.yml--- 输入以下内容--- version: &apos;2.0&apos; services: db: image: mariadb:10.1 container_name: seafile-mysql restart: always environment: - MYSQL_ROOT_PASSWORD=boqii399 # Requested, set the root&apos;s password of MySQL service. - MYSQL_LOG_CONSOLE=true volumes: - /seafile/db:/var/lib/mysql # Requested, specifies the path to MySQL data persistent store. networks: - seafile-net memcached: image: memcached:1.5.6 container_name: seafile-memcached restart: always entrypoint: memcached -m 256 networks: - seafile-net seafile: image: seafileltd/seafile-mc:latest container_name: seafile restart: always ports: - &quot;80:80&quot; # - &quot;443:443&quot; # If https is enabled, cancel the comment. volumes: - /seafile/data:/shared # Requested, specifies the path to Seafile data persistent store. environment: - DB_HOST=db - DB_ROOT_PASSWD=boqii399 # Requested, the value shuold be root&apos;s password of MySQL service. # - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone. - SEAFILE_ADMIN_EMAIL=johnny@boqii.com # Specifies Seafile admin user, default is &apos;me@example.com&apos;. - SEAFILE_ADMIN_PASSWORD=boqii399 # Specifies Seafile admin password, default is &apos;asecret&apos;. - SEAFILE_SERVER_LETSENCRYPT=false # Whether to use https or not. - SEAFILE_SERVER_HOSTNAME=172.16.54.254 # Specifies your host name if https is enabled. depends_on: - db - memcached networks: - seafile-net networks: seafile-net:-------------------------- 安装Seafile 1docker-compose -f docker-compose.yml up -d 安装onlyoffice 创建需要的目录 1mkdir /data/onlyoffice 创建docker-compose.yaml文件 1234567891011121314151617181920212223242526272829303132333435 cd /data/onlyoffice vi docker-compose.yml--- 输入以下内容--- version: &apos;2.0&apos; services: onlyoffice-documentserver: container_name: onlyoffice restart: always image: onlyoffice/documentserver:latest # environment: # - AMQP_SERVER_URL=amqp://guest:guest@onlyoffice-activemq # - AMQP_SERVER_TYPE=activemq # stdin_open: true ports: - &apos;8001:80&apos; # - &apos;443:443&apos; # networks: # - onlyoffice # onlyoffice-activemq: # container_name: onlyoffice-activemq # image: webcenter/activemq:5.14.3 # environment: # - ACTIVEMQ_USERS_guest=guest # - ACTIVEMQ_GROUPS_owners=guest # restart: always # networks: # - onlyoffice # expose: # - &apos;5672&apos; networks: onlyoffice: # driver: &apos;bridge&apos;-------------------------- 安装onlyofficedocker-compose -f docker-compose.yml up -d 启动容器docker start &lt;容器名&gt; 开机自启动容器docker update --restart=always &lt;容器名&gt; seafile系统配置 备份seafile数据Seafile 6.3.4 数据库备份 1234567891011121314151617 cd /seafile/db/db-backup docker exec -ti seafile mysqldump -uroot --opt ccnet_db &gt; ccnet_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile mysqldump -uroot --opt seafile_db &gt; seafile_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile mysqldump -uroot --opt seahub_db &gt; seahub_db.sql.$(date +&quot;%F&quot;)--- 脚本--- #!/bin/bash cd /seafile/db/db-backup for i in ccnet_db seafile_db seahub_db do docker exec -ti seafile mysqldump -uroot --opt $i &gt; $i.sql.$(date +&quot;%F&quot;) done # 清理30天前 find . -name &quot;*sql*&quot; -mtime +30 -delete------------ 数据备份rsync -avh --progress /seafile 目标目录(备份目录) 数据恢复 数据库恢复12345cd /seafile/db/db-backupdocker exec -ti seafile bashmysql ccnet_db &lt; ccnet_db.sql.日期mysql seafile_db &lt; seafile_db.sql.日期mysql seahub_db &lt; seahub_db.sql.日期 数据文件恢复rsync -avh --progress 备份目录 /seafile Seafile 7版本系列 数据库备份 1234567891011121314151617 cd /seafile/db/db-backup docker exec -ti seafile-mysql mysqldump -uroot -pboqii399 --opt ccnet_db &gt; ccnet_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile-mysql mysqldump -uroot -pboqii399 --opt seafile_db &gt; seafile_db.sql.$(date +&quot;%F&quot;) docker exec -ti seafile-mysql mysqldump -uroot -pboqii399 --opt seahub_db &gt; seahub_db.sql.$(date +&quot;%F&quot;)--- 脚本--- #!/bin/bash cd /seafile/db/db-backup for i in ccnet_db seafile_db seahub_db do docker exec -ti seafile-mysql mysqldump -uroot --opt $i &gt; $i.sql.$(date +&quot;%F&quot;) done # 清理30天前 find . -name &quot;*sql*&quot; -mtime +30 -delete------------ 数据备份rsync -avh --progress /seafile 目标目录(备份目录) 数据恢复 数据库恢复 123456#方法1：docker exec -ti seafile-mysql /bin/sh -c &quot; mysql -uroot -pboqii399 ccnet_db &lt; /var/lib/mysql/db-back/ccnet_db.sql.2019-07-25&quot;#方法2： docker exec -ti seafile-mysql bashmysql -uroot -pboqii399 seafile_db &lt; /var/lib/mysql/db-back/seafile_db.sql.2019-07-25mysql -uroot -pboqii399 seahub_db &lt; /var/lib/mysql/db-back/seahub_db.sql.2019-07-25 数据文件恢复rsync -avh --progress 备份目录 /seafile]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建hexo博客系统]]></title>
    <url>%2F2019%2F09%2F23%2F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[环境：已注册Github,并将本机的SSH Key成功上传安装1、 rpm安装nodejs npm12curl -sL https://rpm.nodesource.com/setup_10.x | bash -yum install -y nodejs2、 安装hexo1npm install -g hexo 初始化1、初始化 12cd /datahexo init blog 2、框架安装npm install3、安装Hexo启动服务器的插件npm install hexo-server --save4、启动服务器 本地查看效果，若不指定端口，默认为4000hexo server 配置1、Github创建仓库 12创建的仓库名称必须是***.github.io在仓库的settings中，勾选Template repository 2、安装hexo的git组件 1npm install hexo-deployer-git --save 3、添加git配置 12345678cd /data/blog/vi _config.yml------添加如下内容------deploy: type: git repository: git@github.com:*/*.github.io.git #如git@github.com:johnnywl/johnnywl.github.io.git branch: master------------------------ 4、查看是否可提交代码至github仓库 1ssh -T -ai ~/.ssh/id_rsa git@github.com 创建博客12hexo new &apos;博客名称&apos;vi /data/blog/source/_posts/&apos;博客名称.md&apos; 部署hexo12345hexo ghexo d----或者----hexo d -g------------ hexo优化 下载主题 1234cd /data/toolswget https://github.com/theme-next/hexo-theme-next/archive/master.zipunzip master.zipmv hexo-theme-next-master /data/blog/themes/hexo-theme-next 修改_config.yml 中的主题属性 12title: Johnnywl&apos;s Blogtheme: hexo-theme-next hexo-theme-next首页文字显示预览 123456cd /data/blog/themes/hexo-theme-nextvi _config.yml---修改如下内容---auto_excerpt: enable: false # false修改为true ------------------ hexo-theme-next添加搜索功能 1234567891011121314npm install hexo-generator-searchdb --savevi /data/blog/_config.yml---添加如下内容---search: path: search.xml field: post format: html limit: 10000------------------vi /data/blog/themes/hexo-theme-next/_config.yml---修改如下内容---local_search: enable: false # false修改为true------------------ Mist字体的段落间距过大 12345678910vi /data/blog/themes/hexo-theme-next-master/source/css/_schemes/Mist/_posts-expand.styl---修改如下内容--- article &#123; margin-top: 120px; #修改此项，可改变段落间距 &amp;:first-child &#123; margin-top: 0; &#125; &#125;------------------ 添加网格 123456789101112131415vi /data/blog/themes/hexo-theme-next-master/layout/_layout.swig---添加如下内容 --- # 以下代码添加在&lt;/body&gt;前（不能放在&lt;/head&gt;的后面）&#123;% if thmem.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% ednif %&#125;-----------------vi /data/blog/themes/hexo-theme-next/_config.yml---修改如下内容---canvas_nest：truecolor:线条颜色，默认：&apos;0,0,0&apos;,三个数字分别为（R,G,B）opacity:线条透明度（0~1），默认：0.5count:线条的总数量，默认：150zIndex:背景的z-index属性，css属性用于控制所在层的位置，默认：-1------------------]]></content>
  </entry>
</search>
